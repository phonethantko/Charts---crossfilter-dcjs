document.getElementById("about_source").innerHTML = data_ref_about_source;
document.getElementById("count-info").innerHTML = data_ref_count_info;
document.getElementById("estimateendyear").innerHTML = data_ref_estimateendyear;
document.getElementById("startyear").innerHTML = data_ref_startyear;
document.getElementById("orgtype").innerHTML = data_ref_orgtype;
document.getElementById("footer").innerHTML = data_ref_footer;
document.getElementById("orgs").innerHTML = data_ref_orgs;
//document.getElementById("").innerHTML = '';
//document.getElementById("").innerHTML = '';
//document.getElementById("").innerHTML = '';


function log(a) {
    console.log(new Date + ":" + a)
}

function resetall() {
    map_ts_reset(), dc.filterAll(), dc.redrawAll(), ga("send", {
        hitType: "event",
        eventCategory: "function",
        eventAction: "resetall",
        eventLabel: "Redraw the chart."
    })
}

function map_ts_reset() {
    lat = default_lat, long = default_lon, scale = default_scale, map_ts_update(), log("reset")
}

function set_region_location(a) {
    lat = sr_location[a][0], long = sr_location[a][1], scale = sr_location[a][2], map_ts_update()
}

function map_ts_update() {
    map_chart_ts.projection(d3.geo.mercator().center([lat, long]).scale(scale)), map_chart_ts.redraw()
}

function mapts_up() {
    long -= .5, map_ts_update()
}

function mapts_down() {
    long += .5, map_ts_update()
}

function mapts_left() {
    lat += .5, map_ts_update()
}

function mapts_right() {
    lat -= .5, map_ts_update()
}

function mapts_zoomin() {
    scale += 100, map_ts_update()
}

function mapts_zoomout() {
    scale -= 100, map_ts_update()
}

function mapts_zoomin_2() {
    scale += 1e3, map_ts_update()
}

function mapts_zoomout_2() {
    scale -= 1e3, map_ts_update()
}

function init() {
    log("init started."), state_select = new Array, sr_location = {
        MMR010: [99, 22, 6500],
        MMR012: [98, 20, 4400],
        MMR013: [99, 18, 7100],
        MMR001: [102, 27, 4400],
        MMR017: [99, 18, 5200],
        MMR111: [100, 18, 5200],
        MMR009: [100, 20, 4400],
        MMR006: [103, 12, 4500],
        MMR002: [101, 21, 6e3],
        MMR003: [101, 18, 5800],
        MMR222: [106, 23, 2800],
        MMR005: [100, 25, 4400],
        MMR004: [98, 24, 4400],
        MMR011: [101, 17, 5800],
        MMR018: [99, 21, 7e3]
    }, chart_filter_count = new Array, chart_filter_count.push({
        sector: 0
    }), chart_filter_count.sector = 0, chart_filter_count.push({
        state: 0
    }), chart_filter_count.state = 0, chart_filter_count.push({
        township: 0
    }), chart_filter_count.township = 0, chart_filter_count.push({
        orgtype: 0
    }), chart_filter_count.orgtype = 0, chart_filter_count.push({
        orgname: 0
    }), chart_filter_count.orgname = 0, chart_filter_count.push({
        startyear: 0
    }), chart_filter_count.startyear = 0, chart_filter_count.push({
        estimateendyear: 0
    }), chart_filter_count.estimateendyear = 0, chart_filter_count.push({
        status: 0
    }), chart_filter_count.status = 0, default_lat = 109, default_lon = 20.5, default_scale = 1600, lat = default_lat, long = default_lon, scale = default_scale;
    try {
        var a = "State : ",
            b = "Township : ";
        org_chart = dc.rowChart("#orgs"), chart_filters.orgname = org_chart.filters();
        var c = "";
        chart_orgtype = dc.rowChart("#orgtype"), chart_filters.orgtype = chart_orgtype.filters();
        var d = "",
            e = dc.rowChart("#sector");
        chart_filters.sector = e.filters();
        var f = "",
            g = dc.geoChoroplethChart("#map_cw");
        chart_filters.state = g.filters();
        var h = "";
        map_chart_ts = dc.geoChoroplethChart("#map_ts"), chart_filters.township = map_chart_ts.filters();
        var i = "",
            j = dc.rowChart("#startyear");
        chart_filters.startyear = j.filters();
        var k = "",
            l = dc.rowChart("#estimateendyear");
        chart_filters.estimateendyear = l.filters();
        var m = "",
            n = dc.pieChart("#status");
        chart_filters.status = n.filters();
        var o = "";
        log("chart declared"), document.getElementById("p_bar").style.width = "30%", log("cf declare started");
        var p = crossfilter(decryption());
        log("cf declare finish"), p.organisation = p.dimension(function(a) {
            if (typeof a.Organization == "undefined") {
                log("Organization error" + a);
                log(a.OrganizationType);
            }
            return a.Organization
        }), log("cf organization finish"), p.orgtype = p.dimension(function(a) {
            return a.OrganizationType
        }), log("cf orgtype finish"), p.sector = p.dimension(function(a) {
            return a.SectorCluster
        }), log("cf sector finish"), p.pcode = p.dimension(function(a) {
            return a.StateRegion
        }), log("cf pcode finish"), p.pcode_ts = p.dimension(function(a) {
            return a.Township
        }), log("cf pcode_ts finish"), p.startyear = p.dimension(function(a) {
            return a.StartYear
        });
        log("cf start year finish");
        p.estimateendyear = p.dimension(function(a) {
            console.log(a);
            return a.EstimateEndYear;
        });
        log("cf estimateendyear finish");
        p.status = p.dimension(function(a) {
            return a.Status
        }), log("cf status finish"), log("cf declare finish"), document.getElementById("p_bar").style.width = "40%", console.log(new Date + ":Putting data...");
        var q = p.sector.group(),
            r = p.status.group(),
            s = p.organisation.group(),
            t = p.orgtype.group(),
            u = p.startyear.group(),
            v = p.estimateendyear.group();
        pcode = p.pcode.group(), pcode_ts = p.pcode_ts.group();
        var w = p.groupAll();
        document.getElementById("p_bar").style.width = "50%", log("Grouping all data..."), e.width(300).height(600).dimension(p.sector).group(q).elasticX(!0).data(function(a) {
            return a.top(150)
        }).colors(["#3182bd"]).colorDomain([0, 0]).colorAccessor(function(a, b) {
            return 1
        }).xAxis().ticks(4), log("sector chart declared"), chart_orgtype.width(400).height(300).dimension(p.orgtype).group(t).elasticX(!0).data(function(a) {
            return a.top(150)
        }).colors(["#3182bd"]).colorDomain([0, 0]).colorAccessor(function(a, b) {
            return 1
        }).xAxis().ticks(4), log("orgtype chart declared"), j.width(200).height(900).dimension(p.startyear).group(u).elasticX(!0).data(function(a) {
            return a.top(1 / 0)
        }).colors(["#3182bd"]).colorDomain([0, 0]).colorAccessor(function(a, b) {
            return 1
        }).title(function(a) {
            return "Year : " + a.key + "\nNo. of project activities reported per selected location : " + a.value
        }).xAxis().ticks(2), log("Start year chart declared"), l.width(200).height(900).dimension(p.estimateendyear).group(v).elasticX(!0).data(function(a) {
            return a.top(1 / 0)
        }).colors(["#3182bd"]).colorDomain([0, 0]).colorAccessor(function(a, b) {
            return 1
        }).title(function(a) {
            return "Year : " + a.key + "\nNo. of project activities reported per selected location : " + a.value
        }).xAxis().ticks(2), log("estimate end year chart declared"), n.width(180).height(180).dimension(p.status).group(r).innerRadius(30).colors(["#deebf7", "#9ecae1", "#3182bd"]).colorDomain([0, 3]).colorAccessor(function(a, b) {
            return b % 4
        }), n.legend(dc.legend().x(240).y(0).gap(21)), log("status chart declared."), org_chart.width(500).height(5e3).dimension(p.organisation).group(s).elasticX(!0).data(function(a) {
            return a.top(220)
        }).colors(["#3182bd"]).colorDomain([0, 0]).colorAccessor(function(a, b) {
            return 1
        }), log("organization chart declared.");
        map_chart_value = new Array, $.each(pcode.all(), function(a, b) {
            map_chart_value.push(b.value)
        }), map_chart_value = map_chart_value.sort(function(a, b) {
            return a - b
        });
        var y = d3.scale.ordinal().domain(colorcat10).rangePoints([map_chart_value[0], map_chart_value[map_chart_value.length - 1]]);
        my_range_state = y.range(), g.width(800).height(800).dimension(p.pcode).group(pcode).colors(colorcat10with0).colorDomain([0, 1, 2, 3, 4, 5, 6, 7]).colorAccessor(function(a, b) {
            if (0 == a) return 0;
            var c = closestarray_state(a) + 1;
            return c
        }).overlayGeoJson(statesJSON.features, "State", function(a) {
            return a.properties.ST_PCODE
        }).projection(d3.geo.mercator().center([109, 20.5]).scale(1600)).title(function(b) {
            return a + pcode2state[b.key] + "\nNo. of project activities reported per selected location " + b.value
        }).renderlet(function(a) {
            a.selectAll("path").on("click", function(b) {
                state_select = a.filters(), a.filter(state_select).filter(b.properties.ST_PCODE), state_select = a.filters(), set_region_location(b.properties.ST_PCODE), map_chart_ts.projection(d3.geo.mercator().center([lat, long]).scale(scale)), dc.renderAll()
            })
        }).on("postRedraw", function(a) {
            map_chart_value = new Array, $.each(a.group().all(), function(a, b) {
                map_chart_value.push(b.value)
            }), map_chart_value = map_chart_value.sort(function(a, b) {
                return a - b
            });
            var b = d3.scale.ordinal().domain(colorcat10).rangePoints([map_chart_value[0], map_chart_value[map_chart_value.length - 1]]);
            my_range_state = b.range(), g.render()
        }), log("map chart declared");
        map_chart_value = new Array, $.each(pcode_ts.all(), function(a, b) {
            map_chart_value.push(b.value)
        }), map_chart_value = map_chart_value.sort(function(a, b) {
            return a - b
        });
        var y = d3.scale.ordinal().domain(colorcat10).rangePoints([map_chart_value[0], map_chart_value[map_chart_value.length - 1]]);
        my_range_township = y.range(), map_chart_ts.width(600).height(550).dimension(p.pcode_ts).group(pcode_ts).colors(colorcat10with0).colorDomain([0, 1, 2, 3, 4, 5, 6, 7]).colorAccessor(function(a, b) {
            if (0 == a) return 0;
            var c = closestarray_township(a) + 1;
            return c
        }).overlayGeoJson(townshipJSON.features, "Township", function(a) {
            return a.properties.TS_PCODE
        }).projection(d3.geo.mercator().center([lat, long]).scale(scale)).title(function(a) {
            return b + pcode2state[a.key] + "\nNo. of project activities reported per selected location " + a.value
        }).on("postRedraw", function(a) {
            var b = g.filters()[g.filters().length - 1];
            "undefined" != typeof g.filters()[g.filters().length - 1] && b != h && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "state",
                eventLabel: b
            }), h = b, console.log("State click at " + b));
            var b = map_chart_ts.filters()[map_chart_ts.filters().length - 1];
            "undefined" != typeof map_chart_ts.filters()[map_chart_ts.filters().length - 1] && b != i && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "township",
                eventLabel: b
            }), i = b, console.log("Township click at " + b));
            var b = org_chart.filters()[org_chart.filters().length - 1];
            "undefined" != typeof org_chart.filters()[org_chart.filters().length - 1] && b != c && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "orgname",
                eventLabel: b
            }), c = b, console.log("Organization Name click at " + b));
            var b = chart_orgtype.filters()[chart_orgtype.filters().length - 1];
            "undefined" != typeof chart_orgtype.filters()[chart_orgtype.filters().length - 1] && b != d && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "orgtype",
                eventLabel: b
            }), d = b, console.log("Organization Type click at " + b));
            var b = e.filters()[e.filters().length - 1];
            "undefined" != typeof e.filters()[e.filters().length - 1] && b != f && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "sector",
                eventLabel: b
            }), f = b, console.log("Sector click at " + b));
            var b = j.filters()[j.filters().length - 1];
            "undefined" != typeof j.filters()[j.filters().length - 1] && b != k && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "startyear",
                eventLabel: b
            }), k = b, console.log("Start Year click at " + b));
            var b = l.filters()[l.filters().length - 1];
            "undefined" != typeof l.filters()[l.filters().length - 1] && b != m && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "estimateendyear",
                eventLabel: b
            }), m = b, console.log("Estimated End Year click at " + b));
            var b = n.filters()[n.filters().length - 1];
            "undefined" != typeof n.filters()[n.filters().length - 1] && b != o && (ga("send", {
                hitType: "event",
                eventCategory: "click",
                eventAction: "status",
                eventLabel: b
            }), o = b, console.log("Status click at " + b)), map_chart_value = new Array, $.each(a.group().all(), function(a, b) {
                map_chart_value.push(b.value)
            }), map_chart_value = map_chart_value.sort(function(a, b) {
                return a - b
            });
            var p = d3.scale.ordinal().domain(colorcat10).rangePoints([map_chart_value[0], map_chart_value[map_chart_value.length - 1]]);
            my_range_township = p.range(), map_chart_ts.render()
        }), log("township chart declared."), document.getElementById("p_bar").style.width = "100%", dc.dataCount("#count-info").dimension(p).group(w), dc.renderAll(), log("render all"), ga("send", {
            hitType: "event",
            eventCategory: "load",
            eventAction: "finish",
            eventLabel: "Loaded Successfully"
        }), log("init done")
    } catch (a) {
        console.log(a), console.log(a.message)
    }
}

function closestarray_state(a) {
    for (var b = my_range_state, c = b[0], d = Math.abs(a - c), e = 0; e < b.length; e++) {
        var f = Math.abs(a - b[e]);
        f < d && (d = f, c = b[e])
    }
    return $.inArray(c, b)
}

function closestarray_township(a) {
    for (var b = my_range_township, c = b[0], d = Math.abs(a - c), e = 0; e < b.length; e++) {
        var f = Math.abs(a - b[e]);
        f < d && (d = f, c = b[e])
    }
    return $.inArray(c, b)
}

function orgsortall() {
    org_chart.data(function(a) {
        return ga("send", {
            hitType: "event",
            eventCategory: "function",
            eventAction: "orgsortall",
            eventLabel: "Sort by Name"
        }), a.all()
    }), dc.renderAll()
}

function orgsorttop() {
    org_chart.data(function(a) {
        return ga("send", {
            hitType: "event",
            eventCategory: "function",
            eventAction: "orgsorttop",
            eventLabel: "Sort by No. of project activities reported per selected location"
        }), a.top(300)
    }), dc.renderAll()
}

function decryption() {
    console.log(new Date + ":Decryption started...");
    for (var a = new Array, b = 0, c = 0; data_3w_multiply[b];) {
        var d = data_3w_multiply[b];
        for (h = 0; h < d; h++) a[c] = data_3w_base[b], c += 1;
        b += 1
    }
    document.getElementById("p_bar").style.width = "10%", console.log(new Date + ":First phase decryption finish...");
    for (var e = 0, f = 0, g = new Array, h = 0, i = new Array, j = new Array("MMR010", "MMR012", "MMR013", "MMR001", "MMR017", "MMR111", "MMR009", "MMR006", "MMR002", "MMR003", "MMR222", "MMR005", "MMR004", "MMR011", "MMR018", "Countrywide"), k = 0, l = 0; l < j.length; l++) i[j[l]] = 0;
    for (; a[e];)
        if ("Countrywide" != data_ref_stareg[a[e][3]]) try {
            var l = new Array;
            l.Organization = data_ref_orgniz[a[e][0]], l.OrganizationType = data_ref_orgtype[a[e][1]], l.SectorCluster = data_ref_sector[a[e][2]], l.StateRegion = data_ref_stareg[a[e][3]], l.Township = data_ref_ts[a[e][4]], l.StartYear = data_ref_startyear[a[e][5]], l.EstimateEndYear = data_ref_estimateendyear[a[e][6]], l.Status = data_ref_status[a[e][7]], g[f] = l, e += 1, f += 1, i[l.StateRegion] = i[l.StateRegion] + 1
        } catch (a) {
            console.log(a.message)
        } else {
            i.Countrywide = i.Countrywide + 1;
            for (var m = 0; m < 15; m++) {
                var n = new Array;
                n.Organization = data_ref_orgniz[a[e][0]];
                n.OrganizationType = data_ref_orgtype[a[e][1]];
                n.SectorCluster = data_ref_sector[a[e][2]];
                n.StateRegion = data_ref_stareg[m], n.Township = data_ref_ts[228], n.StartYear = data_ref_startyear[a[e][5]], n.EstimateEndYear = data_ref_estimateendyear[a[e][6]], n.Status = data_ref_status[a[e][7]], g[f] = n, f += 1
            }
            e += 1, h += 1
        }
    for (var k = 0, l = 0; l < j.length; l++) {
        var o = i[j[l]];
        j[l];
        k += o
    }
    return console.log("Total Count is " + k), console.log("Array total count is " + e), console.log("Countrywide count is " + h), document.getElementById("p_bar").style.width = "20%", console.log(new Date + ":Second phase decryption finish..."), g
}

function showpage() {
    $("#loading").hide(), $("#dashboard").show()
}

function callga() {
    ga("create", "UA-93996011-1", "auto"), ga("send", "pageview"), ga("send", {
        hitType: "event",
        eventCategory: "load",
        eventAction: "start",
        eventLabel: "Loaded Started"
    });
}
document.getElementById("header").innerHTML = data_ref_header, document.getElementById("loading_text").innerHTML = data_ref_loading_text, document.getElementById("footer").innerHTML = data_ref_footer, $("#loading").show(), $("#dashboard").hide(),
    function(a, b, c, d, e, f, g) {
        a.GoogleAnalyticsObject = e, a[e] = a[e] || function() {
            (a[e].q = a[e].q || []).push(arguments)
        }, a[e].l = 1 * new Date, f = b.createElement(c), g = b.getElementsByTagName(c)[0], f.async = 1, f.src = d, g.parentNode.insertBefore(f, g)
    }(window, document, "script", "https://www.google-analytics.com/analytics.js", "ga");

callga();
$("#loading").show(), $("#dashboard").hide();
var statemap, pcode, pcode_ts, my_range_state, my_range_township, map_chart_value, org_chart, chart_orgtype, map_chart_ts, default_lat, default_lon, default_scale, lat, long, scale, sr_location, state_select, chart_filter_count, chart_filters = [{
        sector: []
    }, {
        state: []
    }, {
        township: []
    }, {
        status: []
    }, {
        orgtype: []
    }, {
        orgname: []
    }, {
        startyear: []
    }, {
        estimateendyear: []
    }],
    state_select_all = new Array("MMR010", "MMR012", "MMR013", "MMR001", "MMR017", "MMR111", "MMR009", "MMR006", "MMR002", "MMR003", "MMR222", "MMR005", "MMR004", "MMR011", "MMR018"),
    colorcat10 = new Array("#a4cbe7", "#84b9df", "#65a7d7", "#378ccb", "#2d77ad", "#25628e\t", "#1d4c6f"),
    colorcat10with0 = new Array("#AAAAAA", "#a4cbe7", "#84b9df", "#65a7d7", "#378ccb", "#2d77ad", "#25628e", "#1d4c6f");
init();
